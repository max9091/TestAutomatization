# -*- coding: utf-8 -*-
"""
Created on Thu May 25 16:28:27 2017
Python 2.7
@author: max9091
"""
import codecs
import os
from datetime import datetime


def writeNewOutputFile(filepath):
    with codecs.open(filepath,'w',encoding='utf-8') as f:
        f.write(u'SpecimenNo;RunNo;StartTime;EndTime;F_o;F_u;R;f;RT;Nges;FailureLoc;Comments;\n')
        f.write(u'-;-;dd.mm.yyyy hh:mm;dd.mm.yyyy hh:mm;kN;kN;1;Hz;Â°C;1;-;-;')

def writeNewTeXFile(filepath,AsmNr,collectComments = False):
    with codecs.open(filepath,'w',encoding='utf-8') as f:
        f.write(r'% Table generated by python script <collectReadMeDataTerminal_TeX.py> on ' + datetime.now().strftime('%Y-%m-%d_%H-%M-%S') + u'\n')
        f.write(r'\begin{table}[htbp]' + u'\n')
        f.write(r'\centering' + u'\n')
        f.write(r'\caption{Ergebnisse der zyklischen Erm\"udungsversuche ' + str(AsmNr).replace('_',r'\_') + r'}' + u'\n')
        if collectComments:
            f.write(r'\begin{tabular}{rrrrrrrll}' + u'\n')
            f.write(r'\toprule' + u'\n')
            f.write(r'SpNo & RunNo & $F_{o}$ in \si{kN} & $R$ & $f$ in \si{Hz} & RT in \si{\celsius} & $N_{\text{ges}}$  & FailureLoc & C \\' + u'\n')
        else:
            f.write(r'\begin{tabular}{rrrrrrrl}' + u'\n')
            f.write(r'\toprule' + u'\n')
            f.write(r'SpNo & RunNo & $F_{o}$ in \si{kN} & $R$ & $f$ in \si{Hz} & RT in \si{\celsius} & $N_{\text{ges}}$  & FailureLoc \\' + u'\n')
        f.write(r'\midrule')
        
def finishTeXFile(filepath,AsmNr,allComments = {}):
    with codecs.open(filepath,'a',encoding='utf-8') as f:
        f.write(u'\n'+ r'\bottomrule' + u'\n')
        f.write(r'\end{tabular}%' + u'\n')
        f.write(r'\label{tab99:Ermuedungsversuche_' + AsmNr[-3:] + r'}%' + u'\n')
        f.write(r'\end{table}%' + u'\n')
        if len(allComments)>0:
            f.write(r'\textbf{Comments (refering to column C in Table~\ref{tab99:Ermuedungsversuche_' + AsmNr[-3:] + r'}):} \\' + u'\n')
        for cmtNo,cmtStr in allComments.items():
            f.write(r'%d) %s\\'%(cmtNo,cmtStr)  + u'\n')

def writeParameterToFile(filepath,value,separator = ';'):
    with codecs.open(filepath,'a',encoding='utf-8') as f:
        f.write(value+separator)
        
def copyDataFrom_RMfile_to_outputFile(README_filePath,OUTPUT_filePath):
    data = readDataFromFile(README_filePath)
    runsDone = len([line for line in data if line.startswith('######---Run_')])    
    for runNo in range(1, runsDone+1):
        writeParameterToFile(OUTPUT_filePath,'\n' + README_filePath[-6:-4])    #SpecimenNo.
        runStartIndex, runEndIndex = getRunIndices(int(runNo),data)
        writeParameterToFile(OUTPUT_filePath,str(runNo))                            #RunNo.
        writeParameterToFile(OUTPUT_filePath,data[runStartIndex+1][0:16])      #Starttime
        writeParameterToFile(OUTPUT_filePath,data[runStartIndex+1][-16:])      #Endtime
#       ##--READ DATA BLOCKS--##
        blockRT = readBlock(data[runStartIndex:runEndIndex],'RT')
        blockLoading = readBlock(data[runStartIndex:runEndIndex],'Loading')
        blockResults = readBlock(data[runStartIndex:runEndIndex],'Results')
        blockComments = readBlock(data[runStartIndex:runEndIndex],'Comments')
#       ##--WRITE DATA FROM BLOCKS--##
        writeParameterToFile(OUTPUT_filePath,getParameterFromBlock(blockLoading,'F_o')[0])
        writeParameterToFile(OUTPUT_filePath,getParameterFromBlock(blockLoading,'F_u')[0])
        writeParameterToFile(OUTPUT_filePath,getParameterFromBlock(blockLoading,'R')[0])
        writeParameterToFile(OUTPUT_filePath,getParameterFromBlock(blockLoading,'f')[0])
        writeParameterToFile(OUTPUT_filePath,getParameterFromBlock(blockRT,'T')[0])
        writeParameterToFile(OUTPUT_filePath,getParameterFromBlock(blockResults,'N')[0])
        writeParameterToFile(OUTPUT_filePath,getParameterFromBlock(blockResults,'@')[0])
        writeParameterToFile(OUTPUT_filePath,blockToOneLine(blockComments))


def copyDataFrom_RMfile_to_TeX_File(README_filePath,TeX_filePath,allCommentStrs = None):
    data = readDataFromFile(README_filePath)
    runsDone = len([line for line in data if line.startswith('######---Run_')])
    for runNo in range(1, runsDone+1):
        writeParameterToFile(TeX_filePath,u'\n' + '{:d}'.format(int(README_filePath[-6:-4])),separator = r' & ')    #SpecimenNo.
        runStartIndex, runEndIndex = getRunIndices(int(runNo),data)
        writeParameterToFile(TeX_filePath,'{:d}'.format(runNo),separator = r' & ')      #RunNo.
#       ##--READ DATA BLOCKS--##
        blockRT = readBlock(data[runStartIndex:runEndIndex],'RT')
        blockLoading = readBlock(data[runStartIndex:runEndIndex],'Loading')
        blockResults = readBlock(data[runStartIndex:runEndIndex],'Results')
        blockComments = readBlock(data[runStartIndex:runEndIndex],'Comments')
#       ##--WRITE DATA FROM BLOCKS--##
        writeParameterToFile(TeX_filePath,'{:0.2f}'.format(float(getParameterFromBlock(blockLoading,'F_o')[0])),separator = r' & ')
#        writeParameterToFile(OUTPUT_filePath,getParameterFromBlock(blockLoading,'F_u')[0],separator = r'&')
        writeParameterToFile(TeX_filePath,'{:0.2f}'.format(float(getParameterFromBlock(blockLoading,'R')[0])),separator = r' & ')
        writeParameterToFile(TeX_filePath,'{:g}'.format(float(getParameterFromBlock(blockLoading,'f')[0])),separator = r' & ')
        writeParameterToFile(TeX_filePath,'{:0.1f}'.format(float(getParameterFromBlock(blockRT,'T')[0])),separator = r' & ')
        NgesString = getParameterFromBlock(blockResults,'N')[0]
        Nges = evalNges(NgesString)
        writeParameterToFile(TeX_filePath,'{:0.0f}'.format(float(Nges)),separator = r' & ')
        FailureLocStr_raw = getParameterFromBlock(blockResults,'@')[0]
        FailureLocStr = FailureLocStr_raw.replace('_',r'\_')
        if allCommentStrs != None:
            writeParameterToFile(TeX_filePath,FailureLocStr,separator = r' &')
            CommentStr = blockToOneLine(blockComments).replace('_',r'\_')
            if len(CommentStr)>0 and len(CommentStr.replace(' ','')):
                cmtNo = len(allCommentStrs) + 1
                allCommentStrs[cmtNo] = CommentStr
                cmtTableStr = '%d)'%cmtNo
            else:
                cmtTableStr = ''
            writeParameterToFile(TeX_filePath,cmtTableStr,separator = r' \\')
        else:
            writeParameterToFile(TeX_filePath,FailureLocStr,separator = r' \\')
    
#    return allCommentStrs
            


def evalNges(NgesString):
    try:
        tempRes = NgesString
        if tempRes.startswith('='):
            tempRes = tempRes[1:]
        if tempRes.endswith('+'):
            tempRes = tempRes[:-1]
    except:
        print 'ERROR: Previous run results could not be evaluated!'
        tempRes = '-1'
    return eval(tempRes)


def blockToOneLine(block):
    return ','.join(block)


def readDataFromFile(filepath):
    with codecs.open(filepath,'r',encoding='utf-8') as f:
        dataLines = f.read().splitlines()
    return dataLines


def getRunIndices(run,dataLines):
    runStartIndex = dataLines.index('######---Run_' + '%02d' %(run) + '---######')
    runEndIndex = runStartIndex + dataLines[runStartIndex:].index('________________________') + 1
    return (runStartIndex, runEndIndex)

def getParameterFromBlock(block,key): #returns a tupel (float(value),str(dim)) for the key if found (if empty key (0.0,unknown)), otherwise it returns 0.0 as value and 'error' as dim    
    for x in block:
        if x.startswith(str(key)): 
            parameter = x[len(key)+1:].split()   #split up the string using a white-space character (space, '\t', '\n', '\r', '\f') as a delimiter
            if key=='@':
                value = ' '.join(parameter)
                dim = None
                break
            
            if len(parameter) == 2: 
                value = parameter[0]
                dim = parameter[1]
            elif len(parameter) == 1:
                value = parameter[0]
                dim = '1'
            else: 
                value = 0.0
                dim = u'unknown'
            break
    #is value and dim defined?
    try:
        (value,dim)
    except NameError:
        print 'ERROR: no Parameter with key <'+str(key)+'> found!'
        return (0.0,'error')
    else:
        return (value,dim)


def getVersuche(a_dir):
    return [name for name in os.listdir(a_dir)
            if os.path.isdir(os.path.join(a_dir, name)) and name.endswith('Versuche')]    
       
def getSpecimens(a_dir):
    return [name for name in os.listdir(a_dir)
            if os.path.isdir(os.path.join(a_dir, name)) and name.startswith('Probe')]

def readBlock(data,block): #returns a list of all block items without the indicator '\t*'
    blockData = []    
    if data.count(str(block)+':'): 
        lineIndex = data.index(str(block)+':') + 1
        i = 0
        while data[lineIndex].startswith('\t*'):    #do as long line starts with '\t*'
#            print data[lineIndex]
            blockData.append(data[lineIndex][2:])
            lineIndex += 1
            i += 1

    return blockData